CREATE DATABASE IF NOT EXISTS auth_system;

SET FOREIGN_KEY_CHECKS = 0;

DROP TABLE IF EXISTS roles;

CREATE TABLE roles (
    id BIGINT NOT NULL AUTO_INCREMENT,
    name VARCHAR(25) NOT NULL DEFAULT 'worker',
    PRIMARY KEY (id) USING BTREE
);

DROP TABLE IF EXISTS users;

CREATE TABLE users (
    id BIGINT NOT NULL AUTO_INCREMENT,
    email VARCHAR(255) NULL,
    password VARCHAR(255) NULL,
    verified TINYINT(1) NULL DEFAULT '0',
    role_id BIGINT,
    
    PRIMARY KEY (id) USING BTREE,

    CONSTRAINT FK_ROLES_USERS
        FOREIGN KEY (role_id)
        REFERENCES roles (id)
        ON DELETE SET NULL
        ON UPDATE SET NULL
);

DROP TABLE IF EXISTS requests;

CREATE TABLE requests (
    id BIGINT NOT NULL AUTO_INCREMENT,
    user_id BIGINT NULL DEFAULT NULL,
    verif_code VARCHAR(255) NULL DEFAULT NULL,
    timestamp BIGINT NULL DEFAULT NULL,
    type TINYINT(1) NULL DEFAULT '0',

    PRIMARY KEY (id) USING BTREE,

    INDEX FK_USERS_REQUESTS (user_id) USING BTREE,

    CONSTRAINT FK_USERS_REQUESTS
        FOREIGN KEY (user_id)
        REFERENCES users (id)
        ON UPDATE CASCADE
        ON DELETE CASCADE
);

DROP TABLE IF EXISTS login_attempts;

CREATE TABLE login_attempts (
    id BIGINT NOT NULL AUTO_INCREMENT,
    user_id BIGINT NOT NULL DEFAULT '0',
    ip VARCHAR(255) NOT NULL DEFAULT '0',
    timestamp BIGINT NOT NULL DEFAULT '0',
    PRIMARY KEY (id) USING BTREE,

    INDEX FK_USERS_LOGIN_ATTEMPTS (user_id) USING BTREE,

    CONSTRAINT FK_USERS_LOGIN_ATTEMPTS
        FOREIGN KEY (user_id)
        REFERENCES users (id)
        ON UPDATE CASCADE
        ON DELETE CASCADE
);

SET FOREIGN_KEY_CHECKS = 1;